// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "feed",
    columns: [
      { name: "url", type: "string", unique: true },
      { name: "name", type: "string" },
      { name: "added", type: "datetime" },
      { name: "last_fetched", type: "datetime" },
    ],
  },
  {
    name: "blogpost",
    columns: [
      { name: "content", type: "text", notNull: true, defaultValue: "" },
      { name: "title", type: "string", notNull: true, defaultValue: "" },
      { name: "published", type: "datetime" },
      { name: "hook", type: "text", notNull: true, defaultValue: "" },
      { name: "canonical", type: "string" },
      { name: "slug", type: "string", unique: true },
      { name: "cover", type: "string" },
      { name: "keywords", type: "multiple" },
    ],
  },
  {
    name: "mail",
    columns: [
      { name: "html", type: "text" },
      { name: "flags", type: "multiple" },
      { name: "labels", type: "multiple" },
      { name: "thread", type: "link", link: { table: "thread" } },
      { name: "date", type: "datetime" },
      { name: "subject", type: "string" },
      { name: "inReplyTo", type: "string" },
      { name: "to", type: "multiple" },
      { name: "bcc", type: "multiple" },
      { name: "cc", type: "multiple" },
      { name: "sender", type: "multiple" },
      { name: "replyTo", type: "multiple" },
      { name: "from", type: "link", link: { table: "contact" } },
    ],
  },
  { name: "thread", columns: [{ name: "mails", type: "multiple" }] },
  {
    name: "contact",
    columns: [
      { name: "name", type: "string" },
      { name: "address", type: "email", unique: true },
      { name: "avatar", type: "string" },
      { name: "type", type: "multiple" },
    ],
  },
  {
    name: "update",
    columns: [
      { name: "timestamp", type: "datetime" },
      { name: "info", type: "text" },
      { name: "resource", type: "string", notNull: true, defaultValue: "" },
      { name: "completed", type: "bool", notNull: true, defaultValue: "false" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Feed = InferredTypes["feed"];
export type FeedRecord = Feed & XataRecord;

export type Blogpost = InferredTypes["blogpost"];
export type BlogpostRecord = Blogpost & XataRecord;

export type Mail = InferredTypes["mail"];
export type MailRecord = Mail & XataRecord;

export type Thread = InferredTypes["thread"];
export type ThreadRecord = Thread & XataRecord;

export type Contact = InferredTypes["contact"];
export type ContactRecord = Contact & XataRecord;

export type Update = InferredTypes["update"];
export type UpdateRecord = Update & XataRecord;

export type DatabaseSchema = {
  feed: FeedRecord;
  blogpost: BlogpostRecord;
  mail: MailRecord;
  thread: ThreadRecord;
  contact: ContactRecord;
  update: UpdateRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Sam-Apostel-s-workspace-rk6t0c.eu-west-1.xata.sh/db/controll-room",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
